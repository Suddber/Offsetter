# -*- coding: utf-8 -*-

"""
/***************************************************************************
 Offsetter
                                 A QGIS plugin
 This plugin adds offset a field for offset values to line layers to automatically display lines of different categories that are lying on top of each other.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-05-24
        copyright            : (C) 2025 by Suddber
        email                : suddb@posteo.de
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Suddber'
__date__ = '2025-05-24'
__copyright__ = '(C) 2025 by Suddber'

__revision__ = '$Format:%H$'

from qgis.core import QgsProcessingProvider
from .offsetter_algorithm import OffsetterAlgorithm


class OffsetterProvider(QgsProcessingProvider):

    def __init__(self):
        
        QgsProcessingProvider.__init__(self)

    def unload(self):
        
        pass

    def loadAlgorithms(self):
        
        self.addAlgorithm(OffsetterAlgorithm())
        # add additional algorithms here
        # self.addAlgorithm(MyOtherAlgorithm())

    def id(self):
        
        return 'Offsetter'

    def name(self):
        
        return self.tr('Offsetter')

    def icon(self):
        
        return QgsProcessingProvider.icon(self)

    def longName(self):
        
        return self.name()
